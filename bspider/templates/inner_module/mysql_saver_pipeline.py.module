"""
@name=MySQLSaverPipeline
@description=MySQL 存储Pipeline, 将MySQLSaverItem 存储至mysql表中
@type=pipeline
@editor=bspider
"""
from bspider.parser import BasePipeline, MySQLSaverItem
from bspider.utils.exceptions import ParserError
from bspider.utils.database import MysqlClient, prepare_insert_sql


class MySQLSaverPipeline(BasePipeline):
    """因为异步handler时间循环有问题暂时修改为同步循环"""

    def __init__(self, project, settings, log):
        super().__init__(project, settings, log)
        # 实例化MySQL操作对象
        db_config = settings.get("mysql_config")
        self.mysql_handler = dict()
        if db_config is None:
            raise ParserError('\'mysql_config\' must be set in settings.')

        for config in db_config:
            self.mysql_handler[config['db']] = MysqlClient(config)

    async def process_item(self, item):
        """
        对item进行处理,各个pipeline重写
        可以yield返回也可以return
        返回类型为自订定义的类型，会传递给后面的pipeline，返回None将会丢弃这个item
        :param item: previous pipeline result
        :return: param to next pipeline
        """
        if isinstance(item, MySQLSaverItem):
            sql, values = prepare_insert_sql(item.table, item.capacity, auto_update=item.auto_update)
            if not item.db in self.mysql_handler:
                raise ParserError(f'Invalid db name at:{item}')

            self.mysql_handler[item.db].insert(sql, values)
            self.log.info(f'insert success->{item}')
        return item
